<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Parish</title><link>https://parish.github.io/posts/</link><description>Recent content in Posts on Parish</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Copyright notice</copyright><lastBuildDate>Sat, 11 May 2019 16:32:44 +0300</lastBuildDate><atom:link href="https://parish.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Arrays</title><link>https://parish.github.io/posts/golang-arrays/</link><pubDate>Sat, 11 May 2019 16:32:44 +0300</pubDate><guid>https://parish.github.io/posts/golang-arrays/</guid><description>In Go, an array is a fixed length, ordered collection of values of the same type stored in contiguous memory locations.The number of elements is the array&amp;rsquo;s length and it is never negative. The length of the array must always evaluate to a non-negative constant that can be represented as a value of the int data type.
In Go unlike in other imperative languages the size of the array is part of its type, which in part limits its expressive power hence you will not often use them in your programs.</description></item></channel></rss>